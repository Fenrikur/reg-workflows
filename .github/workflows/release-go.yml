name: Release (Go)

on:
  workflow_call:
    inputs:
      go-version:
        required: false
        default: '>=1.19'
        type: string
        description: Version of Go to be used for builds
      archive-base-name:
        required: true
        type: string
        description: 'Base name used for release archive files (pattern: $basename.$os.$architecture.$archive-type)'
      additional-artifacts:
        required: false
        default: ''
        type: string
        description: Space separated list of globs matching artifacts that should be bundled into the release archives alongside the results from go build

jobs:
  # Build artifacts for all major OSs and architectures and upload
  # them to the workflow's artifact storage.
  matrix_build_upload:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        os: [ linux, windows, darwin ]
        arch: [ 386, amd64, arm64 ]
        exclude:
          - os: linux
            arch: arm64
          - os: windows
            arch: arm64
          - os: darwin
            arch: 386
    steps:
      - uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ inputs.go-version }}
          check-latest: true

      - name: Build
        env:
          GOOS: ${{ matrix.os }}
          GOARCH: ${{ matrix.arch }}
          CGO_ENABLED: 0
        run: mkdir -p target; go build -o target -ldflags="-w -s" -v -x ./...

      # Main executable of the service must be named 'cmd' or 'cmd.exe' by convention
      - name: Prepare release archive
        run: |-
          mkdir release
          chmod u=rwX,go=rX target/cmd* || echo "Service executable seems to be missing?"
          cp -p target/* ${{ inputs.additional-artifacts }} release/
          chmod u=rwX,go=rX release/*.sh 2>/dev/null || echo "No .sh files to set permissions on, continuing..."
          ls -alR release

      - name: Create release archive (tar.gz; except Windows)
        if: ${{ matrix.os != 'windows' }}
        working-directory: release
        run: |-
          tar -cvzf ../${{ inputs.archive-base-name }}.${{ matrix.os }}-${{ matrix.arch }}.tar.gz .
          tar -tf ../${{ inputs.archive-base-name }}.${{ matrix.os }}-${{ matrix.arch }}.tar.gz

      - name: Create release archive (zip; Windows only)
        if: ${{ matrix.os == 'windows' }}
        working-directory: release
        run: |-
          zip -vr ../${{ inputs.archive-base-name }}.${{ matrix.os }}-${{ matrix.arch }}.zip .
          unzip -l ../${{ inputs.archive-base-name }}.${{ matrix.os }}-${{ matrix.arch }}.zip

      - name: Upload release archive
        uses: actions/upload-artifact@v3
        with:
          path: ${{ inputs.archive-base-name }}.${{ matrix.os }}-${{ matrix.arch }}.*
          if-no-files-found: warn

  # Only create a release when the event triggering the workflow references a tag.
  create_release:
    if: startsWith(github.event.ref, 'refs/tags/')
    permissions:
      contents: write
    needs: matrix_build_upload
    runs-on: ubuntu-latest
    steps:
      - name: Download Release Artifacts
        uses: actions/download-artifact@v3
        id: download
        with:
          path: release-artifacts
      - name: Create release
        uses: softprops/action-gh-release@v1
        with:
          draft: false
          prerelease: false
          generate_release_notes: true
          files: ${{ steps.download.outputs.download-path }}/**
